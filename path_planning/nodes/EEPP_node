#!/usr/bin/env python

# imports
import sys
import numpy as np
import json

# ros imports
import rospy
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseArray, Pose, Quaternion
from visualization_msgs.msg import Marker, MarkerArray
#path planning imports
from path_planning import Map, plan_path, toQuaternion, getCurrentmsg, getGoalmsg, getPathmsg
from mission_controller.msg import ActivityDone, ActivityRequest, Waypoint, Plan

class EEPP_node:
    def __init__(self, n_agents, n_pois, n_neighbors, namespace):
    	self.Algorithm = "A*"
        self.alpha = 1.0 #1.0
    	self.map = None
        self.nRobots = n_agents
        self.currentPos =[]
        for i in range(n_agents):
            self.currentPos.append([0.0, 0.0])

        self.positions_up_to_date = False

        # Tree of previously planned paths
        self.tree = None

        self.nPoIs = n_pois
        self.nNeighbors = n_neighbors

        # subscribers
        self.maas_sub = rospy.Subscriber("/maas/poi_data", String, self.maas_callback)
        self.map_sub = rospy.Subscriber(namespace+"/map", OccupancyGrid, self.map_callback)
        self.position_sub = rospy.Subscriber('/activity/done', ActivityDone, self.position_callback, queue_size = 10)

        # publishers
        self.mcts_pub = rospy.Publisher("/eepp/path_data", String, queue_size = 10) # jsonified data
        self.activity_pub = rospy.Publisher("/activity/post", ActivityRequest, queue_size = 10) # jsonified data

        self.current_pub = rospy.Publisher("/eepp/current_array", PoseArray, queue_size = 10)
        self.goal_vis_pub = rospy.Publisher("/eepp/goal_marker", Marker, queue_size = 10 )
        self.path_vis_pub = rospy.Publisher("/eepp/path_marker_array", MarkerArray, queue_size = 10 )

############################# Subscriber Callback functions ####################
    '''
    Callback Function for when we receive the POI data from the MAAS team.
    Check that we have map info then plan paths to the POIs.
    '''
    def maas_callback(self, data):
        rospy.loginfo("[EEPP] Received PoI data from MAAS")
        if self.map == None:
        	rospy.loginfo("[EEPP] Have not received map info yet! Unable to plan paths to POIs.")
        	return

        if not self.positions_up_to_date:
        	rospy.loginfo("[EEPP] Unable to update robot locations using ActivityDone msg. Aborting path-planning...")
        	return

        #read in the message from MAAS
        message = json.loads(data.data)

        # message[0]["x"] = 0.285
        # message[0]["y"] = -0.693
        # message[1]["x"] = 0.99
        # message[1]["y"] = -2.25
        # message[2]["x"] = 1.54
        # message[2]["y"] = 0.092
        # message[3]["x"] = 0.5
        # message[3]["y"] = -2.2
        # message[4]["x"] = 0.285
        # message[4]["y"] =  -0.693

        nodestoremove = []
        nodestokeep = []
        # data_indices = np.arange(len(message)).tolist()
        for idx, node in  enumerate(message):
            if self.map.risk_at((node["x"],node["y"])) > 0.9:
                rospy.loginfo("PoI at (%f, %f) is inside an obstacle! Removing it...", node["x"],node["y"])
                nodestoremove.append(idx)
            else:
                nodestokeep.append(idx)
        for idx in sorted(nodestoremove, reverse=True):
            del message[idx]

        nPoIs = self.nPoIs - len(nodestoremove)

        if len(message) < self.nRobots:
        	rospy.loginfo("[EEPP] The number of obstacle free PoIs is less than the number of robots! Aborting path-planning...")
        	return


        ## Loop over robots and plan a path for each robot
        for rIdx in range(self.nRobots):
            # add robot node
            robot_node = dict()
            robot_node["x"] = self.currentPos[rIdx][0]
            robot_node["y"] = self.currentPos[rIdx][1]
            robot_node["poi_id"] = self.nPoIs+rIdx
            robot_node["poi_reward"] = 0.0
            robot_node["agent_id"] = rIdx
            robot_node["connectivity"]= []
            robot_node["costs"] = []
            robot_node["paths"] = []

            start = self.currentPos[rIdx]
            rospy.loginfo("Planning paths for agent %i starting at location (%f, %f)", rIdx, start[0], start[1])
            tree = None

            for idx, node in enumerate(message[0:nPoIs]):
                goal = (node["x"], node["y"])
                goal_viz = getGoalmsg(goal)
                self.goal_vis_pub.publish(goal_viz)

                rospy.loginfo("Planning path to PoI %i at location (%f, %f)", idx, goal[0], goal[1])
                path, cost, tree = plan_path(self.map, start, goal, self.Algorithm, self.alpha, tree)
                rospy.loginfo("Found path! Cost: %f", cost)
                path_viz = getPathmsg(path)
                self.path_vis_pub.publish(path_viz)
                robot_node["connectivity"].append(node["poi_id"])
                robot_node["paths"].append(path)
                robot_node["costs"].append(cost)

            message.append(robot_node)

        # Now plan paths from each node to each other node
        for sIdx, startnode in enumerate(message[0:nPoIs]):
            start = (startnode["x"], startnode["y"])
            message[sIdx]["agent_id"] = -1
            message[sIdx]["connectivity"]= []
            message[sIdx]["costs"] = []
            message[sIdx]["paths"] = []
            for gIdx, goalnode in enumerate(message[0:nPoIs]):
                if sIdx == gIdx:
                    continue
                rospy.loginfo("[EEPP] Planning path from PoI %i to %i. Locations (%f, %f) --> (%f,%f)", sIdx, gIdx, startnode["x"], startnode["y"], goalnode["x"], goalnode["y"])
                goal = (goalnode["x"], goalnode["y"])
                path, cost, tree = plan_path(self.map, start, goal, self.Algorithm, self.alpha, tree)
                rospy.loginfo("[EEPP] Found path! Cost: %f", cost)
                path_viz = getPathmsg(path)
                self.path_vis_pub.publish(path_viz)
                message[sIdx]["connectivity"].append(nodestokeep[gIdx])
                message[sIdx]["paths"].append(path)
                message[sIdx]["costs"].append(cost)

        rospy.loginfo("[EEPP] All paths found. Sending path data to MCTS")
        self.publish_paths(message)
        self.positions_up_to_date = False
        self.currentPos = (node["x"], node["y"])

    '''
    Callback Function for when we receive the map from the map_server node. Take the occupancygrid and derive the info we need.
    '''
    def map_callback(self, msg):
        rospy.loginfo("[EEPP] Received map data!")
        self.map = Map(msg)
        current_message = getCurrentmsg(self.map)
        self.current_pub.publish(current_message)

    def position_callback(self, data):
        """
        :type data: ActivityDone
        """
        rospy.loginfo("[EEPP] Updating current robot locations")
        samples_x_vals = data.x_vals
        samples_y_vals = data.y_vals

        for agent_id in xrange(len(samples_y_vals)):
            self.currentPos[agent_id] = [samples_x_vals[agent_id],samples_y_vals[agent_id]]
        self.positions_up_to_date = True
        print(self.currentPos)


############################# Publisher functions ##############################
    '''
    Publish POI data with paths and costs to the MCTS team.
    '''
    def publish_paths(self, message):
        self.mcts_pub.publish(json.dumps(message))
        # activity = ActivityRequest()
        # p = Plan()
        # for pt in message[0]["paths"][0]:
        #     wp = Waypoint()
        #     wp.x, wp.y, wp.vel = pt
        #     p.wypts.append(wp)
        # activity.plns.append(p)
        # activity.activity_id = 0
        # activity.activity_name = "test"
        # print(activity)
        # self.activity_pub.publish(activity)




############################# Main #############################################
'''
Motly boilerplate for instantiating the node
'''
def main():
    # init ros node
    rospy.init_node('EEPP', anonymous = True)
    # class instance
    EEPP = EEPP_node(rospy.get_param('n_agents'),rospy.get_param('n_pois'),rospy.get_param('n_neighbors'), rospy.get_param('namespace'))
    rospy.spin()
    # create ros loop
    # pub_rate = 0.1 # hertz
    # rate = rospy.Rate(pub_rate)
    # while (not rospy.is_shutdown()):
        # do some stuff if necessary (we only publish reactively in sub callback)

        # ros sleep (sleep to maintain loop rate)
        # rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
