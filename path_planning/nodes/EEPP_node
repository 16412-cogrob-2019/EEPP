#!/usr/bin/env python

# imports
import sys
import numpy as np
import json

# ros imports
import rospy
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseArray, Pose, Quaternion
from visualization_msgs.msg import Marker, MarkerArray
#path planning imports
from path_planning import Map, plan_path, toQuaternion, getCurrentmsg, getGoalmsg, getPathmsg
from mission_controller.msg import ActivityDone, ActivityRequest, Waypoint, Plan

class EEPP_node:
    def __init__(self, n_agents, n_pois, n_neighbors, namespaces):
    	self.Algorithm = "A*"
        self.alpha = 1.0 #1.0
    	self.map = None
        self.nRobots = n_agents
        self.currentPos = [(0.1, -0.05)]

        # Tree of previously planned paths
        self.tree = None

        self.nPoIs = n_pois
        self.nNeighbors = n_neighbors

        # subscribers
        self.maas_sub = rospy.Subscriber("/maas/poi_data", String, self.maas_callback)
        self.map_sub = rospy.Subscriber(namespaces[0]+"/map", OccupancyGrid, self.map_callback)
        self.position_sub = rospy.Subscriber('/activity/done', ActivityDone, self.position_callback, queue_size=1)

        # publishers
        self.mcts_pub = rospy.Publisher("/eepp/path_data", String, queue_size = 10) # jsonified data
        self.activity_pub = rospy.Publisher("/activity/post", ActivityRequest, queue_size = 10) # jsonified data

        self.current_pub = rospy.Publisher("/eepp/current_array", PoseArray, queue_size = 10)
        self.goal_vis_pub = rospy.Publisher("/eepp/goal_marker", Marker, queue_size = 10 )
        self.path_vis_pub = rospy.Publisher("/eepp/path_marker_array", MarkerArray, queue_size = 10 )

############################# Subscriber Callback functions ####################
    '''
    Callback Function for when we receive the POI data from the MAAS team.
    Check that we have map info then plan paths to the POIs.
    '''
    def maas_callback(self, data):
        rospy.loginfo("[EEPP] Received PoI data from MAAS")
        if self.map == None:
        	rospy.loginfo("[EEPP] Have not recieved map info yet! Unable to plan paths to POIs.")
        	return

        #read in the message from MAAS
        message = json.loads(data.data)

        goals = [(0.285, -0.693),(0.99,-2.25), (1.54,0.092), (0.5,-2.2),(0.285, -0.693)]
        # Plan paths from the robot to each PoI
        for idx, node in enumerate(message):
            # goal = (node["x"], node["y"])
            goal = goals[idx]
            goal_viz = getGoalmsg(goal)
            self.goal_vis_pub.publish(goal_viz)
            rospy.loginfo("[EEPP] Planning paths to PoI %i at location (%f, %f)", idx, goal[0], goal[1])
            message[idx]["connectivity"] = []
            message[idx]["agent_id"] = -1
            message[idx]["paths"] = []
            message[idx]["costs"] = []

            if self.map.risk_at(goal) > 0.1:
                rospy.loginfo("[EEPP] PoI is inside an obstacle! Skipping...")
                # message[idx]["paths"].append([[0.0,0.0,0.0]])
                # message[idx]["costs"].append(999999.0)
                #continue

            ## Loop over robots and plan a path for each robot
            for rIdx in range(self.nRobots):
                start = self.currentPos[rIdx]
                rospy.loginfo("Planning path for agent %i starting at location (%f, %f)", rIdx, start[0], start[1])
                path, cost, tree = plan_path(self.map, start, goal, self.Algorithm, self.alpha, self.tree)
                self.tree = tree
                rospy.loginfo("Found path! Cost: %f", cost)
                path_viz = self.getPathmsg(path)
                self.path_vis_pub.publish(path_viz)

                message[idx]["paths"].append(path)
                message[idx]["costs"].append(cost)
                message[idx]["connectivity"].append(message[0]["poi_id"]+rIdx)


        #Then add the robot nodes to the list
        for rIdx in range(self.nRobots):
            robot_node = dict()
            robot_node["x"] = self.currentPos[rIdx][0]
            robot_node["y"] = self.currentPos[rIdx][1]
            robot_node["poi_id"] = message[0]["poi_id"]+rIdx+1
            robot_node["poi_reward"] = 0.0
            robot_node["connectivity"]= [message[0]["poi_id"]]
            robot_node["agent_id"] = rIdx
            robot_node["costs"] = [0.0]
            robot_node["paths"] = [[[0.0,0.0,0.0]]]
            message.append(robot_node)

        rospy.loginfo("[EEPP] All paths found. Sending path data to MCTS")
        self.publish_paths(message)
        self.currentPos = (node["x"], node["y"])

    '''
    Callback Function for when we receive the map from the map_server node. Take the occupancygrid and derive the info we need.
    '''
    def map_callback(self, msg):
        rospy.loginfo("[EEPP] Received map data!")
        self.map = Map(msg)
        current_message = getCurrentmsg(self.map)
        self.current_pub.publish(current_message)

    def position_callback(self, data):
        """
        :type data: ActivityDone
        """
        rospy.loginfo("[EEPP] Updating current robot locations")
        samples_x_vals = data.x_vals #  message["x_vals"]
        samples_y_vals = data.y_vals # message["y_vals"]

        for agent_id in xrange(len(samples_y_vals)):
            self.currentPos[agent_id] = (samples_x_vals[agent_id],samples_y_vals[agent_id])


############################# Publisher functions ##############################
    '''
    Publish POI data with paths and costs to the MCTS team.
    '''
    def publish_paths(self, message):
        self.mcts_pub.publish(json.dumps(message))
        # activity = ActivityRequest()
        # p = Plan()
        # for pt in message[0]["paths"][0]:
        #     wp = Waypoint()
        #     wp.x, wp.y, wp.vel = pt
        #     p.wypts.append(wp)
        # activity.plns.append(p)
        # activity.activity_id = 0
        # activity.activity_name = "test"
        # print(activity)
        # self.activity_pub.publish(activity)




############################# Main #############################################
'''
Motly boilerplate for instantiating the node
'''
def main():
    # init ros node
    rospy.init_node('EEPP', anonymous = True)
    # class instance
    EEPP = EEPP_node(rospy.get_param('n_agents'),rospy.get_param('n_pois'),rospy.get_param('n_neighbors'), rospy.get_param('namespaces'))

    # create ros loop
    pub_rate = 1 # hertz
    rate = rospy.Rate(pub_rate)
    while (not rospy.is_shutdown()):
        # do some stuff if necessary (we only publish reactively in sub callback)

        # ros sleep (sleep to maintain loop rate)
        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
