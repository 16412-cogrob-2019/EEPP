#!/usr/bin/env python

# imports
import sys
import numpy as np
import json
import numpy as np

# ros imports
import rospy
from path_planning import toQuaternion
from std_msgs.msg import String, ColorRGBA

from geometry_msgs.msg import Pose, PoseStamped, Point, Quaternion, Vector3
from visualization_msgs.msg import Marker, MarkerArray

############################# HelperFunctions #############################################

#returns the goal point as a PoseStamped message
def getGoalmsg(x,y):
    goal = PoseStamped()
    goal.header.stamp = rospy.Time.now()
    goal.header.frame_id = "map"
    goal.pose.position.x = x
    goal.pose.position.y = y
    goal.pose.position.z = 0.0

    goal.pose.orientation.x = 0
    goal.pose.orientation.y = 0
    goal.pose.orientation.z = 0
    goal.pose.orientation.w = 1

    return goal

def getPathmsg(path):
    patharray = MarkerArray()

    for i in range(len(path)-1):
        currentx = path[i][0]
        currenty = path[i][1]

        nextx = path[i+1][0]
        nexty = path[i+1][1]
        speed = path[i+1][2]

        marker = Marker()
        marker.header.frame_id = "map"
        marker.header.seq = i
        marker.id = i
        marker.type = 2 #sphere
        dx = nextx - currentx
        dy = nexty - currenty
        yaw = np.arctan2(dy,dx)
        marker.pose.orientation = toQuaternion(yaw)

        # marker.scale.y = 0.05*speed
        # marker.scale.x = 0.05*speed
        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.1

        marker.color.g = 255.0
        marker.color.a = 1

        marker.pose.position.x = currentx
        marker.pose.position.y = currenty
        marker.pose.position.z = 0.0



        patharray.markers.append(marker)

    return patharray


'''
This node is for testing the EEPP_node.
It simulates the MAAS node publisher, and the MCTS node subscriber
'''
class testing_node:
    def __init__(self):
        # publisher
        self.maas_pub = rospy.Publisher("/maas/poi_data", String, queue_size = 10 )
        self.goal_pub = rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size = 10 )
        # self.path_pub = rospy.Publisher("/eepp/path_marker_array", MarkerArray, queue_size = 10 )
        # subscribers
        self.mcts_sub = rospy.Subscriber("/mcts/path_data", String, self.mcts_callback)



############################# Subscriber Callback functions ####################
    '''
    Callback Function to simulate the MCTS team recieving our path data. Prints to terminal
    '''
    def mcts_callback(self, data):
        rospy.loginfo("MCTS Receives path data:")
        message = json.loads(data.data)
        # print(json.dumps(message))#, indent=4, separators=(',',': '))
        for node in message:
            # path = getPathmsg(node[unicode("path")])
            # self.path_pub.publish(path)

############################# Publisher functions ##############################
    '''
    Simulate POI data coming from the MAAS team
    '''
    def publish_points(self):
        numNodes = 1
        message = []
        for i in range(numNodes):
            node = {}
            node["poi_id"] = i
            node["poi_reward"] = 1.0
            # random position in a 10x10m space
            node["x"] = 1.25+0.5*np.random.random_sample()
            node["y"] = -0.25-0.5*np.random.random_sample()
            message.append(node)
        goal = getGoalmsg(node[unicode("x")], node[unicode("y")])
        self.goal_pub.publish(goal)
        self.maas_pub.publish(json.dumps(message))




############################# Main #############################################
'''
Motly boilerplate for instantiating the node
'''
def main():
    # init ros node
    rospy.init_node('testing_node', anonymous = True)

    # class instance
    tester = testing_node()

    # create ros loop
    pub_rate = 0.1 # Send new nodes once every 10 seconds
    rate = rospy.Rate(pub_rate)
    while (not rospy.is_shutdown()):
        # # do some stuff if necessary
        print("Publishing new points of interest")
        tester.publish_points()

        # ros sleep (sleep to maintain loop rate)
        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
